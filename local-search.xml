<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker理解与安装</title>
    <link href="/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <url>/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h1><blockquote><p>Docker 图标鲸鱼背着集装箱，码头工人，整体搬运，是一种虚拟化技术，虚拟机，通过与操作系统协商独占硬件资源（磁盘内存等）独立一个进程，里面软件需要想普通软件一样安装，所谓运行软件，将文件中的内容搬运到内存中，让cpu进行运算（各个任务之间需要调度），以前虚拟出2个不干扰的程序（2个tomcat），除了tomcat本身需要的资源，还需要虚拟机的操作系统额外占用的资源，将虚拟任务 虚拟成线程让docker管理，真实机器操作系统只需要和docker交互就可以了。</p><p>实现所谓的虚拟技术，就是资源可用， 磁盘可访问（docker安装有自己的文件夹，安装的虚拟线程tomcat 也就在这个文件里面保存文件，cpu 虚拟线程找docker进程协调资源，docker的进程找操作系统协调资源，网络各个虚拟线程和docker进程之间是桥接关系，docker安装完成会装一个虚拟网卡）</p></blockquote><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> docker<br></code></pre></td></tr></table></figure><p>启动Docker</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> docker<br></code></pre></td></tr></table></figure><p>安装好后 配置国内镜像源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -sSL https:<span class="hljs-regexp">//g</span>et.daocloud.io<span class="hljs-regexp">/daotools/</span>set_mirror.sh | sh -s http:<span class="hljs-regexp">//</span>f1361db2.m.daocloud.io<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi  <span class="hljs-regexp">/etc/</span>docker/daemon.json<br><br>&#123;<br>     <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>         <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>,<br>         <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>,<br>         <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br>     ]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/clip_image002-1712382897721-1.jpg"></p><p> 查看已下载的镜像（就是静态的模板软件）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><p>拉取Redis镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull redis</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/clip_image004.jpg"></p><blockquote><p>创建一个容器的时候，docker 会自动对它进行命名</p><p><strong>-P</strong> <strong>：</strong>是容器内部端口<strong>随机</strong>映射到主机的端口。</p><p><strong>-p</strong> <strong>：</strong>是容器内部端口绑定到<strong>指定</strong>的主机端口，默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在端口后面加上 <strong>&#x2F;udp</strong>。</p><p><strong>–name</strong> <strong>：</strong>命名容器。</p><p><strong>-d</strong>：指定 docker 网络类型，有 bridge、overlay。</p><p>-v $PWD&#x2F;test：&#x2F;test：将主机中当前目录下的test 挂载到容器的 &#x2F;test。</p></blockquote><p>运行Redis容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --name redis -d -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> redis:latest<br></code></pre></td></tr></table></figure><p>查看所有的容器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker ps -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>启动Redis容器</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-literal">start</span> redis<br></code></pre></td></tr></table></figure><p>物理机访问</p><p><img src="/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/clip_image006.jpg"></p><p>可以进入 运行中的容器 容器名字 不能进 就使用ID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis /bin/bash<br></code></pre></td></tr></table></figure><p>进入容器 没有vi命令 编辑需要安装vim</p><p>如果直接敲apt-get install vim命令则会有如下提示</p><p><img src="/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/clip_image008.jpg"></p><p>我们需要先敲入apt-get update命令，这个命令的作用是：同步 &#x2F;etc&#x2F;apt&#x2F;sources.list 和 &#x2F;etc&#x2F;apt&#x2F;sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。</p><p><img src="/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/clip_image010.jpg"></p><p>然后使用apt-get install vim安装vim。</p><p>海外源 网络慢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot;</span> &gt;&gt;<br>/etc/apt/sources.list<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>如果要发布项目 建立好 test 项目与 html 文件 拷贝test目录到docker中的tomcat的webapps中，需要主要查看docker中 tomcat的安装路径（pwd）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>webapps tomcat:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>webapps/<br></code></pre></td></tr></table></figure><p><img src="/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/image-20221130173819977.png"></p><p>将容器中的文件拷贝出来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker cp nginx:<span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/nginx.conf /u</span>sr<span class="hljs-regexp">/ftp/</span>nginx.conf<br>docker cp <span class="hljs-regexp">/usr/</span>ftp<span class="hljs-regexp">/nginx.conf nginx:/</span>etc<span class="hljs-regexp">/nginx/</span>nginx.conf<br></code></pre></td></tr></table></figure><h1 id="私服搭建"><a href="#私服搭建" class="headerlink" title="私服搭建"></a>私服搭建</h1><p>为什么要搭建本地仓库？</p><blockquote><p>Docker 运行软件是由镜像 images 产生container 容器来运行，本来是从docker中央仓库或者镜像仓库。</p><p>如果自己在公司局域网中要快速搭建docker环境就需要搭建本地仓库，搭建本地仓库的电脑可以把公共仓库中的镜像直接上传到本地仓库，也可以把自己修改了配置的容器打包成自己的镜像上传到本地仓库就大大节约了下载和每一台都要重新配置的时间</p></blockquote><p>docker下载registry软件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker pull daocloud.io<span class="hljs-regexp">/library/</span>registry:latest<br></code></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><p>生成容器和端口映射</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d -p 5000:5000 <span class="hljs-attribute">--restart</span>=always --name myregistry daocloud.io/library/registry:latest<br></code></pre></td></tr></table></figure><p>将容器打包贴自己的标签 例如 我设置自定义名字为 redis 标tag也可以理解为版本号my</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">docker <span class="hljs-keyword">tag</span> docker.io/tomca<span class="hljs-variable">t:latest</span> localhos<span class="hljs-variable">t:5000</span>/<span class="hljs-keyword">redi</span><span class="hljs-variable">s:my</span><br></code></pre></td></tr></table></figure><p>推送到指定仓库</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">docker push localhos<span class="hljs-variable">t:5000</span>/<span class="hljs-keyword">redi</span><span class="hljs-variable">s:my</span><br></code></pre></td></tr></table></figure><p>查看指定仓库的资源 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl http://localhost:5000/v2/_catalog<br></code></pre></td></tr></table></figure><p><img src="/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/clip_image012.jpg"></p><p>查看指定镜像的版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">139.123</span>:<span class="hljs-number">5000</span><span class="hljs-regexp">/v2/</span>redis<span class="hljs-regexp">/tags/</span>list<br></code></pre></td></tr></table></figure><p><img src="/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/clip_image014.jpg"></p><p>其他电脑如何获取资源</p><p>其他机器要从指定的仓库拉取镜像，首先要保证上述的网址能够打开</p><p><a href="http://192.168.139.123:5000/v2/redis/tags/list">http://192.168.139.123:5000/v2/redis/tags/list</a></p><p>修改本地docker deamon.json</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>docker/daemon.json<br></code></pre></td></tr></table></figure><p>在默认资源的后面添加指定仓库</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br><span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>,<br><span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>,<br><span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br>],<br><span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;192.168.139.123:5000&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/06/Docker%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%89%E8%A3%85/clip_image016.jpg"></p><p>从指定仓库拉取 指定版本的指定镜像 ，名称要全部正确</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull <span class="hljs-number">192.168.139.123</span>/redis:my<br></code></pre></td></tr></table></figure><p><strong>配置</strong> <strong>DNS</strong></p><p>我们可以在宿主机的 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件中增加以下内容来设置全部容器的 DNS：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br> <span class="hljs-string">&quot;dns&quot;</span> : [<br> <span class="hljs-string">&quot;114.114.114.114&quot;</span>,<br>  <span class="hljs-string">&quot;8.8.8.8&quot;</span><br> ]<br>&#125;<br></code></pre></td></tr></table></figure><p>设置后，启动容器的 DNS 会自动配置为 114.114.114.114 和 8.8.8.8。</p><p>配置完，需要重启 docker 才能生效。</p><p>查看容器的 DNS 是否生效可以使用以下命令，它会输出容器的 DNS 信息：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -it --<span class="hljs-built_in">rm</span> centos <span class="hljs-built_in">cat</span> etc/resolv.conf</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>运维</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx负载Tomcat</title>
    <link href="/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/"/>
    <url>/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/</url>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.oracle.com<span class="hljs-regexp">/java/</span>technologies<span class="hljs-regexp">/downloads/</span><br>http:<span class="hljs-regexp">//</span>tomcat.apache.org/<br>http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span><br></code></pre></td></tr></table></figure><ol><li><p>在 <em>&#x2F;usr</em>  目录下新建一个 ftp 文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /usr/ftp<br></code></pre></td></tr></table></figure></li><li><p>把 nginx-1.15.10.tar.gz apache-tomcat-9.0.17.tar.gz jdk-8u181-linux-x64.tar.gz安装包上传到 ftp 目录下                   <a id="环境变量"></a><br><a id="防火墙"></a></p></li><li><p>这里为了后续方便 建议把防火墙关闭</p></li></ol><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>方式一：</p><ul><li>关闭防火墙</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status firewalld        ====查看防火状态<br>systemctl stop firewalld          ====暂时关闭防火墙<br>systemctl disable firewalld       ====永久关闭防火墙<br>systemctl enable firewalld        ====重启防火墙<br></code></pre></td></tr></table></figure><p>方式二：</p><ul><li>配置防火墙规则</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start firewalld//启动  <br>systemctl status firewalld //查看状态<br>systemctl stop firewalld //停止<br>systemctl disable firewalld//禁用<br>systemctl enable firewalld.servic//开机自动启动<br>systemctl restart firewalld.service//重启<br>开启某个端口、服务   (--permanent永久生效，没有此参数重启后失效)<br>firewall-cmd --permanent --zone=public --add-port=80/tcp//永久开启80端口<br>firewall-cmd --zone=public --add-port=80/tcp //临时开启80端口<br>firewall-cmd --zone=public --add-service=https //临时<br>firewall-cmd --permanent --zone=public --add-service=https //永久<br>firewall-cmd --zone=public --list-ports//查看开放的端口有哪些<br>firewall-cmd --reload//**重载** 修改配置文件后 使用命令重新加载 更新防火墙规则<br></code></pre></td></tr></table></figure><h1 id="Tomcat安装配置"><a href="#Tomcat安装配置" class="headerlink" title="Tomcat安装配置"></a>Tomcat安装配置</h1><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/ftp<br>tar -zvxf jdk-8u181-linux-x64.tar.gz<br><span class="hljs-built_in">mv</span> jdk1.8.0_181 /usr/local<br></code></pre></td></tr></table></figure><p>把环境变量追加入到  &#x2F;etc&#x2F;profile 下  <strong><a href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">配置</a></strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/<span class="hljs-keyword">profile</span><br></code></pre></td></tr></table></figure><p>把下方配置追加到 &#x2F;etc&#x2F;profile 尾部 <strong>注意JDK的实际路径</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr/local/jdk1.8.0_181<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">JRE_HOME</span>=<span class="hljs-variable">$JAVA_HOME</span>/jre<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CLASSPATH</span>=<span class="hljs-variable">$CLASSPATH</span>:.:$JRE_HOME/lib:$JAVA_HOME/lib<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$JAVA_HOME/bin:$JRE_HOME/bin<br></code></pre></td></tr></table></figure><p>然后重新配置 profile  使其变量生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>输入 java -version 出现如下就说明 JDK 已经配置成功了<br><img src="/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/image-20220809163838671.png" alt="img"></p><h2 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h2><p>解压</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /usr/ftp<br><span class="hljs-attribute">tar</span> -zvxf apache-tomcat-<span class="hljs-number">9</span>.<span class="hljs-number">0</span>.<span class="hljs-number">17</span>.tar.gz<br><span class="hljs-attribute">mv</span> apache-tomcat-<span class="hljs-number">9</span>.<span class="hljs-number">0</span>.<span class="hljs-number">17</span> /usr/local/tomcat1  <br></code></pre></td></tr></table></figure><p>把环境变量追加入到  &#x2F;etc&#x2F;profile 下  <strong><a href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">配置</a></strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/<span class="hljs-keyword">profile</span><br></code></pre></td></tr></table></figure><p>把下方配置追加到 &#x2F;etc&#x2F;profile 尾部 <strong>注意tomcat的实际路径</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">CATALINA_BASE</span>=/usr/local/tomcat1<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CATALINA_HOME</span>=<span class="hljs-variable">$CATALINA_BASE</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">TOMCAT_HOME</span>=<span class="hljs-variable">$CATALINA_BASE</span><br></code></pre></td></tr></table></figure><p>然后重新配置 profile  使其变量生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>启动 Tomcat<br>如果是在 tomcat 下的 bin 目录下就执行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sh </span>startup.<span class="hljs-keyword">sh </span>                  <br></code></pre></td></tr></table></figure><p>在其他目录下执行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span> /usr/<span class="hljs-keyword">local</span>/tomcat1/bin/startup.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>停止运行    同上</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">sh shutdown.sh<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>bin目录下<br>sh /usr/local/tomcat1/bin/shutdown.sh  <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>其他目录下<br></code></pre></td></tr></table></figure><ul><li>浏览器输入http:&#x2F;&#x2F;【虚拟机ip】:8080 【Tomcat默认端口】 例如<a href="http://192.168.139.123:8080/">http://192.168.139.123:8080</a></li><li>显示如下页面就表示安装成功了</li><li>如果没有 则需要放行 8080 端口 <strong><a href="#%E9%98%B2%E7%81%AB%E5%A2%99">防火墙配置</a></strong><br><img src="/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/image-20220809163906881.png" alt="img"></li></ul><h1 id="Nginx安装配置"><a href="#Nginx安装配置" class="headerlink" title="Nginx安装配置"></a>Nginx安装配置</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>正式安装Nginx之前需要给操作系统下载好必要的依赖</p><blockquote><p>yum install gcc gcc-c++ openssl automake autoconf make libtool pcre pcre-devel zlib openssl-devel zlib-devel</p></blockquote><h2 id="创建-Nginx-用户组"><a href="#创建-Nginx-用户组" class="headerlink" title="创建 Nginx 用户组"></a>创建 Nginx 用户组</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">groupadd nginx   <br>useradd -m -s <span class="hljs-regexp">/sbin/</span>nologin -g nginx nginx<br></code></pre></td></tr></table></figure><h2 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h2><p>进入Nginx解压目录下 安装指定到 &#x2F;usr&#x2F;local&#x2F; 目录下的 nginx-1.15.10、编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/ftp<br>tar -zvxf nginx-1.15.10.tar.gz<br><span class="hljs-built_in">mv</span> nginx-1.15.10 /usr/local     <br><span class="hljs-built_in">cd</span> /usr/local/nginx-1.15.10<br>./configure --prefix=/usr/local/nginx <br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>超级管理员运行 Nginx</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx<br>sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s reload             ---重启<br></code></pre></td></tr></table></figure><ul><li><p>如果报如下错误表示少了 logs 文件夹需要在 <strong>&#x2F;usr&#x2F;local&#x2F;nginx-1.15.10</strong> 创建一个 logs 文件夹 然后再次执行启动命令<br><img src="/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/image-20220809163918065.png" alt="image-20220809163918065"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkdir</span> logs                           ###注意是在 /usr/local/nginx-<span class="hljs-number">1</span>.<span class="hljs-number">15</span>.<span class="hljs-number">10</span> 目录下创建<br></code></pre></td></tr></table></figure></li><li><p>浏览器输入http:&#x2F;&#x2F;【虚拟机ip】:80 【nginx默认端口】 显示如下页面就表示安装成功了</p></li><li><p>如果没有 则需要放行 80 端口 <strong><a href="#%E9%98%B2%E7%81%AB%E5%A2%99">防火墙配置</a></strong><br><img src="/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/image-20220809163926072.png"></p></li><li><p>配置nginx</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">vi /usr/<span class="hljs-keyword">local</span>/nginx/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure></li><li><p>端口号配置    默认端口 80<br><img src="/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/image-20220809163939897.png"></p></li><li><p>集群配置<br><img src="/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/image-20220809163947407.png"></p></li></ul><h1 id="Nginx代理负载Tomcat"><a href="#Nginx代理负载Tomcat" class="headerlink" title="Nginx代理负载Tomcat"></a>Nginx代理负载Tomcat</h1><blockquote><p>负载均衡<br>数以万计算 百万 千万的用户 同时访问同一台服务器，再好的性能也扛不住。<br>负载均衡就是 准备了很多台镜像服务器，但是由一个代理服务器帮助用户选择内容服务器。<br>代理  张三 和李四 都是菜贩 摊位挨着，李四上厕所了，让张三代理一下,有人来买李四的菜吗，拿  李四的 菜 收的钱放李四的盒子  找的钱从李四的盒子 （这些事都是张三代理）</p></blockquote><h2 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h2><p>复制多个 tomcat </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/<br><span class="hljs-built_in">cp</span> -r tomcat1 tomcat2<br><span class="hljs-built_in">cp</span> -r tomcat1 tomcat3<br></code></pre></td></tr></table></figure><p>加入 tomcat2 tomcat3 的环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vi /etc<span class="hljs-built_in">/profile</span><br><span class="hljs-built_in"></span>在 Tomcat1 下方添加 Tomcat2 Tomcat3<br><span class="hljs-comment">##### Tomcat2 #####</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CATALINA_BASE2</span>=/usr/local/tomcat2<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CATALINA_HOME2</span>=<span class="hljs-variable">$CATALINA_BASE2</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">TOMCAT_HOME2</span>=<span class="hljs-variable">$CATALINA_BASE2</span><br><span class="hljs-comment">##### Tomcat3 #####</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CATALINA_BASE3</span>=/usr/local/tomcat3<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CATALINA_HOME3</span>=<span class="hljs-variable">$CATALINA_BASE3</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">TOMCAT_HOME3</span>=<span class="hljs-variable">$CATALINA_BASE3</span><br></code></pre></td></tr></table></figure><blockquote><p>配置多个tomcat为什么需要在&#x2F;etc&#x2F;profile 修改多个 tomcat 设置</p><p>如果不配置，哪个tomcat先启动就认谁的，例如tomcat1设置为123，tomcat2设置为abc，1先启动显示123 ，2先启动就会显示abc</p><p>shutdown.sh有时候并不能关闭服务器</p><p>ps –ef|grep tomcat &#x3D;&#x3D;ps 查看 grep过滤 tomcat想在进程中查找的程序名</p><p>找到进程号 使用 kill -9 +进程号让其停止运行<br>然后重新配置 profile  使其变量生效</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>修改 tomcat2   tomcat3 server.xml中的端口号<br>tomcat2      如下4处端口依次 +1</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">vi /usr/<span class="hljs-keyword">local</span>/tomcat2/conf/<span class="hljs-keyword">server</span>.xml<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">22 </span>&lt;Server port=<span class="hljs-string">&quot;8006&quot;</span> shutdown=<span class="hljs-string">&quot;SHUTDOWN&quot;</span>&gt;             <span class="hljs-number">8005</span>&gt;<span class="hljs-number">8006</span><br><span class="hljs-symbol">69 </span>    &lt;Connector port=<span class="hljs-string">&quot;8081&quot;</span> protocol=<span class="hljs-string">&quot;HTTP/1.1&quot;</span>       <span class="hljs-number">8080</span>&gt;<span class="hljs-number">8081</span><br><span class="hljs-symbol">70 </span>               connectionTimeout=<span class="hljs-string">&quot;20000&quot;</span><br><span class="hljs-symbol">71 </span>               redirectPort=<span class="hljs-string">&quot;8443&quot;</span> /&gt;<br><span class="hljs-symbol">116 </span>    &lt;Connector port=<span class="hljs-string">&quot;8010&quot;</span> protocol=<span class="hljs-string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="hljs-string">&quot;8444&quot;</span> /&gt;  <span class="hljs-number">8009</span>&gt;<span class="hljs-number">8010</span>    <span class="hljs-number">8443</span>&gt;<span class="hljs-number">8444</span><br></code></pre></td></tr></table></figure><p>tomcat3</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">vi /usr/<span class="hljs-keyword">local</span>/tomcat3/conf/<span class="hljs-keyword">server</span>.xml<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">22 </span>&lt;Server port=<span class="hljs-string">&quot;8007&quot;</span> shutdown=<span class="hljs-string">&quot;SHUTDOWN&quot;</span>&gt;             <span class="hljs-number">8005</span>&gt;<span class="hljs-number">8007</span><br><span class="hljs-symbol">69 </span>    &lt;Connector port=<span class="hljs-string">&quot;8082&quot;</span> protocol=<span class="hljs-string">&quot;HTTP/1.1&quot;</span>       <span class="hljs-number">8080</span>&gt;<span class="hljs-number">8082</span><br><span class="hljs-symbol">70 </span>               connectionTimeout=<span class="hljs-string">&quot;20000&quot;</span><br><span class="hljs-symbol">71 </span>               redirectPort=<span class="hljs-string">&quot;8443&quot;</span> /&gt;<br><span class="hljs-symbol">116 </span>    &lt;Connector port=<span class="hljs-string">&quot;8011&quot;</span> protocol=<span class="hljs-string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="hljs-string">&quot;8445&quot;</span> /&gt;  <span class="hljs-number">8009</span>&gt;<span class="hljs-number">8011</span>    <span class="hljs-number">8443</span>&gt;<span class="hljs-number">8445</span><br></code></pre></td></tr></table></figure><p>启动 tomcat2  tomcat3</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span> /usr/<span class="hljs-keyword">local</span>/tomcat2/bin/startup.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword">sh</span> /usr/<span class="hljs-keyword">local</span>/tomcat3/bin/startup.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p><strong>注意对应关系</strong><br><img src="/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/image-20220809163959404.png"><br><img src="/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/image-20220809164010447.png"></p><blockquote><p>如何理解，在没有配置tomcat特殊的系统变量的情况下</p><ol><li><p>先启动tomcat1，再启动tomcat2 ，查看只有tomcat1，如果先启动tomcat2，再启动tomcat 只有 tomcat2（谁先启动，谁的路径就注册成了临时的系统路径）</p></li><li><p>明明tomcat2在执行，执行tomcat1的关闭脚本sh,结果tomcat2被关了</p></li></ol><p>再理解 ，配置profile（系统环境设置）之后，每个tomcat的catalina.sh就不找别人的路径了原因就是因为他找到 了路径</p></blockquote><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>找到 Server 修改端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">41</span>     server &#123;<br><span class="hljs-attribute">42</span>         listen       <span class="hljs-number">9090</span>;###修改默认端口<span class="hljs-number">80</span>&gt;<span class="hljs-number">9090</span>，也可以不修改<br><span class="hljs-attribute">43</span>         server_name  localhost;<br>       <span class="hljs-comment">#集群配置</span><br><span class="hljs-attribute">35</span>     upstream tomcats &#123;<br><span class="hljs-attribute">36</span>       server <span class="hljs-number">192.168.139.123:8080</span> weight=<span class="hljs-number">1</span>;#服务器集群，weight 权重<br><span class="hljs-attribute">37</span>       server <span class="hljs-number">192.168.139.123:8081</span> weight=<span class="hljs-number">1</span>;<br><span class="hljs-attribute">38</span>       server <span class="hljs-number">192.168.139.123:8082</span> weight=<span class="hljs-number">1</span>;<br><span class="hljs-attribute">39</span>         &#125;<br></code></pre></td></tr></table></figure><p>修改配置文件后<br>在 Server 中的 location &#x2F;中添加  proxy_pass  <a href="http://tomcats/">http://tomcats</a>;  tomcats 和前面的 upstream 的名字相同 配置完效果如下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-comment">#root   html;</span><br>    <span class="hljs-comment">#index  index.html index.htm;</span><br>    <span class="hljs-attribute">proxy_set_header</span> HOST <span class="hljs-variable">$host</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    <span class="hljs-attribute">proxy_pass</span>   http://tomcats;<br>&#125;<br></code></pre></td></tr></table></figure><p>找到在每个tomcat的 webapp文件夹下的ROOT文件夹 新建1.txt文件，并添加上文字</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo tomcat1 &gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat1/</span>webapps<span class="hljs-regexp">/ROOT/</span><span class="hljs-number">1</span>.txt<br>echo tomcat2 &gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat2/</span>webapps<span class="hljs-regexp">/ROOT/</span><span class="hljs-number">1</span>.txt<br>echo tomcat3 &gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat3/</span>webapps<span class="hljs-regexp">/ROOT/</span><span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p>然后进入浏览器在，浏览器中使用 http:&#x2F;&#x2F;虚拟机IP：修改的Nginx端口&#x2F;1.txt 例如 <a href="http://192.168.139.123:9090/1.txt">http://192.168.139.123:9090/1.txt</a><br><img src="/2024/04/05/Nginx%E8%B4%9F%E8%BD%BDTomcat/%E8%B4%9F%E8%BD%BD.gif"><br>到这里就基本实现了 Nginx 负载多个 Tomcat </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>运维</tag>
      
      <tag>Tomcat</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
